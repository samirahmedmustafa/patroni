---
# tasks file for roles/postgresql
- name: deploy postgresql runtime
  block:
    - name: create dir
      ansible.builtin.file:
        path: "{{ apps.postgresql.app_base_dir }}"
        owner: "{{ servers[group_names[0]]['sys_users'][0].user.name }}"
        group: "{{ servers[group_names[0]]['sys_users'][0].user.groups }}"
        state: directory

    - name: extract compressed apps into /product/[app_dir]
      ansible.builtin.unarchive:
        src: "http://{{ ansible_ip }}/download/{{ apps.postgresql.compressed }}"
        dest: "{{ apps.postgresql.app_base_dir }}"
        owner: "{{ servers[group_names[0]]['sys_users'][0].user.name }}"
        group: "{{ servers[group_names[0]]['sys_users'][0].user.groups }}"
        remote_src: yes

    - name: create ver sym links
      ansible.builtin.file:
        dest: "{{ apps.postgresql.ver }}"
        src: "{{ apps.postgresql.version }}"
        owner: "{{ servers[group_names[0]]['sys_users'][0].user.name }}"
        group: "{{ servers[group_names[0]]['sys_users'][0].user.groups }}"
        state: link

    - name: create extra dir
      ansible.builtin.file:
        path: "{{ item }}"
        owner: "{{ servers[group_names[0]]['sys_users'][0].user.name }}"
        group: "{{ servers[group_names[0]]['sys_users'][0].user.groups }}"
        state: directory
      loop: "{{ postgresql.dirs }}"

    - name: write postgres jinj2 templates
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop: "{{ postgresql.templates }}"

    - name: extract compressed apps into /product/[app_dir]
      ansible.builtin.unarchive:
        src: "http://{{ ansible_ip }}/download/{{ apps.etcd.compressed }}"
        dest: "/tmp/"
        remote_src: yes

